{"version":3,"sources":["location.js","dust.js","App.js","serviceWorker.js","index.js"],"names":["Location","react_default","a","createElement","className","src","alt","Dust","_ref","pm10Value","pm25Value","pm10Value24","pm25Value24","o3Value","district","KAKAO_API_KEY","AIRKOREA_API_KEY","App","state","serviceReady","getDistrict","navigator","geolocation","getCurrentPosition","position","coords","_this","callDistrcitApi","Promise","resolve","then","res","setState","dong","split","length","callGetTmCoodApi","API_URL","concat","fetch","text","DOMParser","parseFromString","coord","tmX","getElementsByTagName","innerHTML","tmY","callGetMonitoringStation","item","getDustInformation","station","console","log","dust","longitude","latitude","headers","Authorization","json","obj","documents","address_name","renderDust","src_dust_0","renderLocation","src_location_0","this","isDustDone","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.44fd62d8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./location.css\";\r\nimport \"./bulma.css\";\r\n\r\nfunction Location() {\r\n  return (\r\n    <div className=\"container location-container\">\r\n      <div className=\"title-section\">\r\n        <img src=\"/images/logo.svg\" alt=\"\" />\r\n      </div>\r\n      <div className=\"main-section\">\r\n        <div className=\"main-wrapper\">\r\n          <div className=\"waiting-img\">\r\n            <img src=\"/images/pluto-coming-soon.png\" alt=\"\" />\r\n          </div>\r\n          <div className=\"waiting-title title\">\r\n            미세먼지 정보를 가져오고 있습니다!\r\n        </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Location;\r\n","import React from \"react\";\r\nimport \"./dust.css\";\r\nimport \"./bulma.css\";\r\n\r\nfunction Dust({ pm10Value, pm25Value, pm10Value24, pm25Value24, o3Value, district }) {\r\n  return (\r\n    <div className=\"container dust-container\">\r\n      <div className=\"title-section\">\r\n        <img src=\"/images/logo.svg\" alt=\"\" />\r\n      </div>\r\n      <div className=\"main-section\">\r\n        <div className=\"main-wrapper\">\r\n          현재 {district} 미세먼지는..\r\n          <div className=\"dust-list\">\r\n            <ul>\r\n              <li>\r\n                pm10 지수 :  {pm10Value}\r\n              </li>\r\n              <li>\r\n                pm25 지수 : {pm25Value}\r\n              </li>\r\n              <li>\r\n                pm10 지수 (24시간 기준) : {pm10Value24}\r\n              </li>\r\n              <li>\r\n                pm25 지수 (24시간 기준) : {pm25Value24}\r\n              </li>\r\n              <li>\r\n                오존 지수 : {o3Value}\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dust;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Location from \"./location\";\r\nimport Dust from \"./dust\";\r\n\r\nconst KAKAO_API_KEY = \"KakaoAK c981c546d4e1806ac95ac294b40fc615\";\r\nconst AIRKOREA_API_KEY =\r\n  \"Nc7DTt1ImQ%2F8JdDmOz0qZQYcbstlIitpt9a6btKCSY1vud%2FvhzZ%2BM2QR4uWjW58IFJ8JWzJ7w9osVarTAn1iSg%3D%3D\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    serviceReady: 0\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getDistrict();\r\n  }\r\n\r\n  getDistrict = () => {\r\n    navigator.geolocation.getCurrentPosition(position => {\r\n      const coords = position.coords;\r\n      const district = this.callDistrcitApi(coords);\r\n      Promise.resolve(district)\r\n        .then(res => res)\r\n        .then(res => {\r\n          this.setState({\r\n            district: res\r\n          });\r\n          res = res.split(\" \");\r\n          var dong = res[res.length - 1];\r\n          // Getting 동 이름 done\r\n          this.callGetTmCoodApi(dong);\r\n        });\r\n    });\r\n  };\r\n\r\n  callGetTmCoodApi = dong => {\r\n    const API_URL = `http://openapi.airkorea.or.kr/openapi/services/rest/MsrstnInfoInqireSvc/getTMStdrCrdnt?ServiceKey=${AIRKOREA_API_KEY}&numOfRows=1&PageNo=1&umdName=${dong}`;\r\n    const PROXY_URL = \"https://cors-anywhere.herokuapp.com/\";\r\n\r\n    fetch(PROXY_URL + API_URL)\r\n      .then(res => res.text())\r\n      .then(res => new DOMParser().parseFromString(res, \"text/xml\"))\r\n      .then(res => {\r\n        var coord = {};\r\n        coord.tmX = res.getElementsByTagName(\"tmX\")[0].innerHTML;\r\n        coord.tmY = res.getElementsByTagName(\"tmY\")[0].innerHTML;\r\n        this.callGetMonitoringStation(coord);\r\n      });\r\n  };\r\n\r\n  callGetMonitoringStation = coord => {\r\n    const API_URL = `http://openapi.airkorea.or.kr/openapi/services/rest/MsrstnInfoInqireSvc/getNearbyMsrstnList?ServiceKey=${AIRKOREA_API_KEY}&tmX=${\r\n      coord.tmX\r\n      }&tmY=${coord.tmY}`;\r\n    const PROXY_URL = \"https://cors-anywhere.herokuapp.com/\";\r\n\r\n    fetch(PROXY_URL + API_URL)\r\n      .then(res => res.text())\r\n      .then(res => new DOMParser().parseFromString(res, \"text/xml\"))\r\n      .then(res => {\r\n        var item = res\r\n          .getElementsByTagName(\"item\")[0]\r\n          .getElementsByTagName(\"stationName\")[0].innerHTML;\r\n        // getting monitoring station done\r\n        this.getDustInformation(item);\r\n      });\r\n  };\r\n\r\n  getDustInformation = station => {\r\n    const API_URL = `http://openapi.airkorea.or.kr/openapi/services/rest/ArpltnInforInqireSvc/getMsrstnAcctoRltmMesureDnsty?serviceKey=${AIRKOREA_API_KEY}&numOfRows=10&pageNo=1&stationName=${station}&dataTerm=DAILY&ver=1.3`;\r\n    const PROXY_URL = \"https://cors-anywhere.herokuapp.com/\";\r\n\r\n    fetch(PROXY_URL + API_URL)\r\n      .then(res => res.text())\r\n      .then(res => new DOMParser().parseFromString(res, \"text/xml\"))\r\n      .then(res => {\r\n        return res.getElementsByTagName(\"item\")[0];\r\n      })\r\n      .then(res => {\r\n        var pm10Value = res.getElementsByTagName(\"pm10Value\")[0].innerHTML;\r\n        console.log(\"TCL: pm10Value\", pm10Value);\r\n        var pm25Value = res.getElementsByTagName(\"pm25Value\")[0].innerHTML;\r\n        console.log(\"TCL: pm25Value\", pm25Value);\r\n        var pm10Value24 = res.getElementsByTagName(\"pm10Value24\")[0].innerHTML;\r\n        console.log(\"TCL: pm10Value24\", pm10Value24);\r\n        var pm25Value24 = res.getElementsByTagName(\"pm25Value24\")[0].innerHTML;\r\n        console.log(\"TCL: pm25Value24\", pm25Value24);\r\n        var o3Value = res.getElementsByTagName(\"o3Value\")[0].innerHTML;\r\n        console.log(\"TCL: o3Value\", o3Value);\r\n\r\n        // GETTING DUST INFORMATION DONE\r\n\r\n        this.setState({\r\n          serviceReady: 1,\r\n          dust: {\r\n            pm10Value: pm10Value,\r\n            pm25Value: pm25Value,\r\n            pm10Value24: pm10Value24,\r\n            pm25Value24: pm25Value24,\r\n            o3Value: o3Value\r\n          }\r\n        });\r\n      });\r\n  };\r\n\r\n  callDistrcitApi = coords => {\r\n    const API_URL = `https://dapi.kakao.com/v2/local/geo/coord2regioncode.json?x=${\r\n      coords.longitude\r\n      }&y=${coords.latitude}`;\r\n    return fetch(API_URL, {\r\n      headers: {\r\n        Authorization: KAKAO_API_KEY\r\n      }\r\n    })\r\n      .then(res => res.json())\r\n      .then(obj => obj.documents[0].address_name);\r\n  };\r\n\r\n  renderDust = () => {\r\n    const dust = <Dust\r\n      pm10Value={this.state.dust.pm10Value}\r\n      pm25Value={this.state.dust.pm25Value}\r\n      pm10Value24={this.state.dust.pm10Value24}\r\n      pm25Value24={this.state.dust.pm25Value24}\r\n      o3Value={this.state.dust.o3Value}\r\n      district={this.state.district}\r\n    />\r\n    return dust\r\n  }\r\n\r\n  renderLocation = () => {\r\n    const location = <Location/>\r\n    return location\r\n  }\r\n\r\n  render() {\r\n    var isDustDone = this.state.serviceReady;\r\n    return (\r\n      <div className={isDustDone ? \"dust\" : \"location\"}>\r\n        {isDustDone ? this.renderDust() : this.renderLocation()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}